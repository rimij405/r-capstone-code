#!/usr/bin/env bash
set -euo pipefail

# ============================================================================ #
# make-requirements
#
# Copyright (C) 2023 Ian Effendi. All rights reserved.
# Released under the MIT License.
# https://spdx.org/licenses/MIT.html
#
# Author: @rimij405 (Ian Effendi)
# https://github.com/rimij405
#
# Simple script that will install `pip-tools` if missing and will invoke
# `pip-compile` to prepare a `requirements.txt` file with hashes for a 
# reproducible environment.
# ============================================================================ #

# ========================================
# CONSTANTS / READONLY
# ========================================

# Script metadata.
__PROGRAM_NAME="Make Requirements (via pip-tools)"
__PROGRAM_CMD="make-requirements"
__PROGRAM_VERSION="1.0.0"
__PROGRAM_ISO_DATE="2023-12-04"
__COPYRIGHT="
Copyright (C) 2023 Ian Effendi
License MIT <https://spdx.org/licenses/MIT.html>

This is free software; you are free to change and distribute it.
There is NO WARRANTY, to the extent permitted by law.
"

# Compute values based on this .
__SCRIPT_DIR="$(dirname "$(realpath "$0")")"
__PROJECT_DIR="$(realpath "${__SCRIPT_DIR}/..")"

# Secure constants.
readonly __PROGRAM_NAME 
readonly __PROGRAM_CMD 
readonly __PROGRAM_VERSION 
readonly __PROGRAM_ISO_DATE
readonly __COPYRIGHT
readonly __SCRIPT_DIR 
readonly __PROJECT_DIR

# ========================================
# INTERNAL VARIABLES
# ========================================

# Conditionals.
__VERBOSE=false
__PRINT_HELP=false
__PRINT_VERSION=false
__INSTALL_PACKAGES=false

# Default values.
__INPUT_REQUIREMENTS_FILE="${__PROJECT_DIR}/requirements.in"
__OUTPUT_REQUIREMENTS_FILE="${__PROJECT_DIR}/requirements.txt"

# ========================================
# PRIVATE FUNCTIONS
# ========================================

# Send message to STDERR and exit with an error.
# 
# Args:
#   message: string     The error message to display.
function die() {
    printf "%s\n%s\n" \
    "$*" \
    "$(out::usage | head --lines=1)" \
    >&2
    exit 2
}

# Display debug associative array.
#
# Args:
#   __CLI_OPTIONS: array      The array of config options.
function out::options() {
    # Get associative array by name reference.
    local -n array=$1

    # Get the column length, or default.
    local -ir size=${2:-20}

    # Define the printf pattern for rows.
    local pattern="%-${size}s%s\n"

    # Display header.
    # shellcheck disable=SC2059
    printf "${pattern}" "Option" "Value"

    # Display separator.
    # shellcheck disable=SC2059
    printf "${pattern}" "------" "-----"

    # Display table contents.
    for field in "${!array[@]}"
    do
        # shellcheck disable=SC2059
        printf "${pattern}" "${field}" "= ${array[${field}]}"
    done
}

# Send copyright information to stdout.
function out::copyright() {
    printf "%s" "${__COPYRIGHT}"
}

# Send version information to stdout.
function out::version() {
    printf "%s, version %s%s\n" \
        "${__PROGRAM_NAME}" \
        "${__PROGRAM_VERSION}" \
        "$(out::copyright)"
}

# Send usage information to stdout.
function out::usage() {
    printf "Usage: %s [--file=<INPUT>] [--output=<OUTPUT>] [--install-pkgs] [--help] [--version] [--verbose]
    %s
    
    Arguments:
        -h, --help              Display this help text.
        -v, --version           Display script version and build information.
        -f, --file              Set custom input 'requirements.in' file.
        -o, --output            Set custom output 'requirements.txt' file.
        -i, --install-pkgs      Runs 'pip-sync' at end of script.
        -vv, --verbose          Show output of called options.

    This script will install 'pip-tools' via pip.
    " \
    "${__PROGRAM_CMD}" \
    "$(out::version | head --lines=1)"
}

# Send help text to stdout and then exit.
function send::help() {
    printf "%s\n" "$(out::usage)"
    exit 0
}

# Install the pip-tools development dependency if it is missing.
function require::pip-tools() {
    # Test if pip-tools is already installed.
    # See: https://unix.stackexchange.com/a/578918
    if ! pip show pip-tools > /dev/null 2>&1; then
        printf "%s\n" "Installing pip-tools..."
        pip install --upgrade pip-tools
    fi
}

# Generate a minimal `requirements.in` file if one is not discovered.
#
# Args:
#   __CLI_OPTIONS: array      The array of config options.
function require::requirements() {
    local -n config=$1
    local -r input="${config["REQUIREMENTS.IN"]}"

    # Ensure the requirements file exists.
    if [ ! -f "${input}" ]; then
        die "Missing ${input}"
    fi

    # Notify user file was found.
    printf "Found %s\n" "${input}"
}

# Compile the application requirements.
#
# Args:
#   __CLI_OPTIONS: array      The array of config options.
function build::requirements() {
    local -n config=$1
    local -r input="${config["REQUIREMENTS.IN"]:-requirements.in}"
    local -r output="${config["REQUIREMENTS.OUT"]:-requirements.txt}"
    printf "%s\n" "Compiling ${input} ==> ${output}..."
    if [ "${config["VERBOSE"]}" == true ]; then 
        pip-compile --strip-extras --generate-hashes "${input}" -o "${output}"
    else 
        pip-compile --strip-extras --generate-hashes "${input}" -o "${output}" > /dev/null 2>&1
    fi
}

# Compile the application requirements.
#
# Args:
#   __CLI_OPTIONS: array      The array of config options.
function install::requirements() {
    local -n config=$1
    printf "Installing packages...\n"
    if [ "${config["VERBOSE"]}" == true ]; then 
        pip-sync
    else 
        pip-sync > /dev/null 2>&1
    fi
}

# ========================================
# ARGUMENT HANDLING
# ========================================

# Loop through the short options. Long options are processed by `-`.
while getopts hvi-: OPT; do
    # support long options: https://stackoverflow.com/a/28466267/519360
    if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
        OPT="${OPTARG%%=*}"       # extract long option name
        # shellcheck disable=SC2295
        OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
        OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
    fi
    # process options.
    case "$OPT" in
        vv | verbose )
            __VERBOSE=true ;;
        h | help )
            __PRINT_HELP=true ;;
        v | version )
            __PRINT_VERSION=true ;;
        i | install-pkgs)
            __INSTALL_PACKAGES=true ;;
        f | file)
            __INPUT_REQUIREMENTS_FILE="$OPTARG" ;;
        o | output)
            __OUTPUT_REQUIREMENTS_FILE="$OPTARG" ;;        
        \? )
            # bad short option (error reported via getopts)
            exit 2 ;;  
        * )            
            # bad long option
            die "Illegal option --$OPT" ;;         
    esac
done

# remove parsed options and args from $@ list
shift $((OPTIND-1))

# Convert argument variables to readonly options array.
declare -rA __CLI_OPTIONS=( \
    ['SHOW_HELP']=${__PRINT_HELP} \
    ['SHOW_VERSION']=${__PRINT_VERSION} \
    ['INSTALL_PKGS']=${__INSTALL_PACKAGES} \
    ['REQUIREMENTS.IN']=${__INPUT_REQUIREMENTS_FILE} \
    ['REQUIREMENTS.OUT']=${__OUTPUT_REQUIREMENTS_FILE} \
    ['VERBOSE']=${__VERBOSE} \
)

# ========================================
# HELP & VERSION INFORMATION
# ========================================

# If printing help, do so and exit.
if [[ ${__CLI_OPTIONS["SHOW_HELP"]} == "true" ]]; then
    send::help
fi

# If printing version, do so and exit.
if [[ ${__CLI_OPTIONS["SHOW_VERSION"]} == "true" ]]; then
    out::version
    exit 0
fi

# ========================================
# MAKE REQUIREMENTS
# ========================================

# If printing verbose, output options and then continue normally.
if [[ ${__CLI_OPTIONS["VERBOSE"]} == "true" ]]; then
    out::options __CLI_OPTIONS
fi

# Require pip-tools.
require::pip-tools

# Require input file.
require::requirements __CLI_OPTIONS

# Build the requirements.
build::requirements __CLI_OPTIONS

# Install packages if option is set.
if [ "${__CLI_OPTIONS["INSTALL_PKGS"]}" == "true" ]; then
    install::requirements __CLI_OPTIONS
fi

# Notify user process is done.
echo "Done."


